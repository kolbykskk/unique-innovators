<div class="search">
  <div class="container search-container">
    <%= form_tag gigs_path, method: :get, class: 'search-form' do %>
      <p>
        <div class="autocomplete form-group col-md-6">
          <%= text_field_tag :search, params[:search], class: 'form-control home-search', placeholder: "Search", autocomplete: :off %>
        </div>
        <div class="form-group col-md-3">
          <%= text_field_tag :location, params[:location], class: 'form-control home-search', placeholder: "Location" %>
        </div>
        <div class="form-group col-md-1">
          <%= select_tag :radius, options_for_select(['10', '25', '50', '75', '100', '200']), class: 'form-control home-search' %>
        </div>
        <div class="form-group">
          <%= submit_tag "Search", name: nil, class: "btn btn-info search-submit home-search" %>
        </div>
      </p>
    <% end %>
  </div>
</div>
<div class="container">
  <div class="row">
    <% if current_user %>
      <div class="col-md-3">
        <div class="index-card2 text-center">
        <%= link_to new_user_gig_path(current_user) do %>
          <img src="https://image.ibb.co/eip5ZS/plus_2.png" height= "150"/>
        <% end %>
      </div>
      </div>
    <% end %>
  <% @gigs.each do |gig| %>
    <div class="col-md-3 col-sm-6 col-xs-12">
      <%= link_to gig do %>
        <div class="index-image">
          <% if gig.gallery[0].to_s.exclude?("mp4") %>
            <%= image_tag gig.gallery[0], width: '100%', class: 'act-image' %>
          <% else %>
            <%= video_tag gig.gallery[0], width: '100%', class: 'act-image' %>
          <% end %>
        </div>
      <% end %>
        <div class="index-card">
          <div class="index-user-2">
            <%= link_to user_path(gig.user.id) do %>
              <%= image_tag gig.user.avatar_url(28), class: 'gig-gravatar' %>
              <%= gig.user.username %>
            <% end %>
            <div class="rating pull-right">
              <div>
              <% if Review.where(gig_id: gig.id).count > 0 %>
              <%= link_to gig_reviews_path(gig), class: 'rating-gig-show' do %>
                <% review_average(gig.id).to_i.times do %>
                  <img src="https://image.ibb.co/h7zAic/flash_5.png" />
                <% end %>
                <% (5 - review_average(gig.id)).to_i.times do %>
                  <img src="https://image.ibb.co/k2ExBx/flash_3.png" />
                <% end %>
              <% end %>
              <% else %>
                No reviews yet
              <% end %>
              </div>
            </div>
          </div>
          <p class="index-title"><%= link_to "#{gig.title}", gig %></p>
        <% unless gig.allow == "Online Only" %>
          <span class="glyphicon glyphicon-map-marker"></span> <%= gig.location %>
        <% else %>
        <span class="glyphicon glyphicon-map-marker"></span> Online Only, No Meetups
        <% end %>
        <hr>
        <h3><b>$<%= (gig.price).floor %></b></h3>
        <% if gig.event == true %>
          <p class="tag">Event</p>
        <% else %>
          <p class="tag">Gig</p>
        <% end %>
      </div>
    </div>
  <% end %>
  </div>
  <%= paginate(@gigs) %>
</div>

<script>
var ready;
ready = function() {
  var input = document.getElementById('location');
  autocomplete = new google.maps.places.Autocomplete(input, {types: ['geocode']});
  google.maps.event.addListener(autocomplete, 'place_changed', function(){
    var place = autocomplete.getPlace();
  });
};
$(document).ready(ready);
$(document).on('page:load', ready);
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBjbcZiWF7waJt5NkAYWxvr06JKJWVNaJc&libraries=places"></script>



<script>
var countries = ['Web Developer', 'Web Development',
'Graphic Designer', 'Graphic Design', 'Singer', 'Musician', 'Music', 'Logo Design', 'Web Designer', 'Web Design', 'Logo', 'Song', 'Digital Marketing',
'Marketing', 'Advertise', 'Advertisement', 'Video', 'Animation', 'Animate', 'Photographer', 'Photography', 'Sports', 'Fitness', 'Fun', 'Lifestyle', 'Programming', 'Tech', 'Writing', 'Write', 'Translation', 'Translate']
console.log(countries);
function autocomplete(inp, arr) {
  /*the autocomplete function takes two arguments,
  the text field element and an array of possible autocompleted values:*/
  var currentFocus;
  /*execute a function when someone writes in the text field:*/
  inp.addEventListener("input", function(e) {
      var a, b, i, val = this.value;
      /*close any already open lists of autocompleted values*/
      closeAllLists();
      if (!val) { return false;}
      currentFocus = -1;
      /*create a DIV element that will contain the items (values):*/
      a = document.createElement("DIV");
      a.setAttribute("id", this.id + "autocomplete-list");
      a.setAttribute("class", "autocomplete-items");
      /*append the DIV element as a child of the autocomplete container:*/
      this.parentNode.appendChild(a);
      /*for each item in the array...*/
      for (i = 0; i < arr.length; i++) {
        /*check if the item starts with the same letters as the text field value:*/
        if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
          /*create a DIV element for each matching element:*/
          b = document.createElement("DIV");
          /*make the matching letters bold:*/
          b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
          b.innerHTML += arr[i].substr(val.length);
          /*insert a input field that will hold the current array item's value:*/
          b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
          /*execute a function when someone clicks on the item value (DIV element):*/
              b.addEventListener("click", function(e) {
              /*insert the value for the autocomplete text field:*/
              inp.value = this.getElementsByTagName("input")[0].value;
              /*close the list of autocompleted values,
              (or any other open lists of autocompleted values:*/
              closeAllLists();
          });
          a.appendChild(b);
        }
      }
  });
  /*execute a function presses a key on the keyboard:*/
  inp.addEventListener("keydown", function(e) {
      var x = document.getElementById(this.id + "autocomplete-list");
      if (x) x = x.getElementsByTagName("div");
      if (e.keyCode == 40) {
        /*If the arrow DOWN key is pressed,
        increase the currentFocus variable:*/
        currentFocus++;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 38) { //up
        /*If the arrow UP key is pressed,
        decrease the currentFocus variable:*/
        currentFocus--;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 13) {
        /*If the ENTER key is pressed, prevent the form from being submitted,*/
        e.preventDefault();
        if (currentFocus > -1) {
          /*and simulate a click on the "active" item:*/
          if (x) x[currentFocus].click();
        }
      }
  });
  function addActive(x) {
    /*a function to classify an item as "active":*/
    if (!x) return false;
    /*start by removing the "active" class on all items:*/
    removeActive(x);
    if (currentFocus >= x.length) currentFocus = 0;
    if (currentFocus < 0) currentFocus = (x.length - 1);
    /*add class "autocomplete-active":*/
    x[currentFocus].classList.add("autocomplete-active");
  }
  function removeActive(x) {
    /*a function to remove the "active" class from all autocomplete items:*/
    for (var i = 0; i < x.length; i++) {
      x[i].classList.remove("autocomplete-active");
    }
  }
  function closeAllLists(elmnt) {
    /*close all autocomplete lists in the document,
    except the one passed as an argument:*/
    var x = document.getElementsByClassName("autocomplete-items");
    for (var i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != inp) {
      x[i].parentNode.removeChild(x[i]);
    }
  }
}
/*execute a function when someone clicks in the document:*/
document.addEventListener("click", function (e) {
    closeAllLists(e.target);
});
}

autocomplete(document.getElementById("search"), countries);
</script>
